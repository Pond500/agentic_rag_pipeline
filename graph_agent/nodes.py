# agentic_rag_pipeline/graph_agent/nodes.py (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô Intelligent Retry)

import os
import json
import requests
from langchain.prompts import PromptTemplate

# --- Import "‡∏ñ‡∏≤‡∏î" State ‡πÅ‡∏•‡∏∞ LLM Provider ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ ---
from .state import GraphState
from agentic_rag_pipeline.core.llm_provider import get_llm

# --- API Server URL ---
API_BASE_URL = "http://localhost:8001"

# --- Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Validator LLM ---
ULTIMATE_VALIDATION_PROMPT_V5 = PromptTemplate.from_template(
    """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI" (V5) ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á "Chunk ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"

---
### **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ (Chunk ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô):**
1.  **‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å:** "{document_title}"
2.  **Chunk ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤:** ... {previous_chunk_text} ...
3.  **Chunk ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à):** ... {current_chunk_text} ...
4.  **Chunk ‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å "‡∏™‡πà‡∏ß‡∏ô" (Section):** (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á)
    - Section ID: {section_id}
    - Section Title: "{section_title}"
    - Strategy ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: "{strategy_used}"

---
### **‡πÅ‡∏ü‡πâ‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ (‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß):**
(‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ñ‡∏∑‡∏≠ "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô")
---
{retry_history_str}
---

### **‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (Your Mission):**

‡∏à‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á **"Chunk ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"**

**‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ú‡πà‡∏≤‡∏ô (is_valid: true):**
‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö JSON ‡∏ó‡∏µ‡πà‡∏°‡∏µ "is_valid" ‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

**‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô (is_valid: false):**
1.  ‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢ (diagnose) ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
2.  ‡∏≠‡πà‡∏≤‡∏ô "‡πÅ‡∏ü‡πâ‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥" ‡πÅ‡∏•‡∏∞ "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô" (Section)
3.  ‡∏™‡∏±‡πà‡∏á‡∏¢‡∏≤ (recommendation) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà "‡∏™‡πà‡∏ß‡∏ô" (Section) ‡∏ô‡∏µ‡πâ
    - "action": ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "RETRY_SECTION" (‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ) ‡∏´‡∏£‡∏∑‡∏≠ "GIVE_UP" (‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ)
    - "suggestion": (‡∏ñ‡πâ‡∏≤ action=RETRY_SECTION) ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏™‡πà‡∏ß‡∏ô" ‡∏ô‡∏µ‡πâ (‡πÄ‡∏ä‡πà‡∏ô 'semantic', 'structural')

**‡∏à‡∏á‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON object ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:**
{{
  "is_valid": boolean,
  "reason": "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'",
  "diagnose": "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏",
  "recommendation": {{
    "action": "RETRY_SECTION | GIVE_UP",
    "target_section_id": {section_id},
    "suggestion": "(‡∏ñ‡πâ‡∏≤ RETRY_SECTION) 'semantic' | 'structural' | 'recursive'"
  }}
}}

**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏±‡πà‡∏á‡∏¢‡∏≤):**
{{
  "is_valid": false,
  "reason": "‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏à‡∏ö‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏±‡∏ô",
  "diagnose": "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå 'recursive' ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Section {section_id} ('{section_title}') ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°",
  "recommendation": {{
    "action": "RETRY_SECTION",
    "target_section_id": {section_id},
    "suggestion": "semantic"
  }}
}}
"""
)

LAYOUT_ANALYSIS_PROMPT_V2 = PromptTemplate.from_template(
    """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "‡∏™‡∏ñ‡∏≤‡∏õ‡∏ô‡∏¥‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£" (Document Structure Architect) ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏â‡∏ö‡∏±‡∏ö" ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ö‡πà‡∏á‡∏°‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô "‡∏™‡πà‡∏ß‡∏ô" (Sections) ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô

[‡∏Å‡∏é‡πÄ‡∏´‡∏•‡πá‡∏Å]
1.  ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏â‡∏ö‡∏±‡∏ö" ({document_text})
2.  ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô "‡∏™‡πà‡∏ß‡∏ô" (Sections) ‡∏ï‡∏≤‡∏°‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏ó‡∏ô‡∏≥, ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1, ‡∏†‡∏≤‡∏Ñ‡∏ú‡∏ô‡∏ß‡∏Å)
3.  ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ "‡∏™‡πà‡∏ß‡∏ô" ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå" (recommended_strategy) ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÜ:
    - "semantic": ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°" ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
    - "structural": ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢, ‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö, ‡∏Ç‡πâ‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
    - "recursive": ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à (‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ Default ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)

[‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£]
- ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: "{document_title}"
- ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡πà‡∏≠: "{summary}"

[‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏â‡∏ö‡∏±‡∏ö (‡∏¢‡πà‡∏≠)]
{document_preview}

‡∏à‡∏á‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON object ‡∏ó‡∏µ‡πà‡∏°‡∏µ "‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á" (layout_map) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:
{{
  "layout_map": {{
    "sections": [
      {{
        "section_id": 1,
        "title": "‡∏ö‡∏ó‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£",
        "char_start": 0,
        "char_end": 4850,
        "recommended_strategy": "semantic"
      }},
      {{
        "section_id": 2,
        "title": "‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö ‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 1-50",
        "char_start": 4851,
        "char_end": 28900,
        "recommended_strategy": "structural"
      }},
      {{
        "section_id": 3,
        "title": "‡∏†‡∏≤‡∏Ñ‡∏ú‡∏ô‡∏ß‡∏Å: ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢",
        "char_start": 28901,
        "char_end": 35000,
        "recommended_strategy": "recursive" 
      }}
    ]
  }}
}}

**‡∏à‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JSON object ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°**
"""
)

def _parse_json_from_llm(text: str) -> dict | None:
    """Helper function to safely parse JSON from LLM response."""
    try:
        match = text[text.find('{'):text.rfind('}')+1]
        return json.loads(match)
    except Exception:
        return None

# ==============================================================================
# ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà 1: Preprocess Node (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
# ==============================================================================
def preprocess_node(state: GraphState) -> GraphState:
    print("--- ‚öôÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ: Preprocessing ---")
    file_path = state.get("file_path")
    try:
        response = requests.post(f"{API_BASE_URL}/tools/preprocess_document", json={"file_path": file_path})
        response.raise_for_status()
        data = response.json()
        if data.get("status") == "success":
            print("   -> ‚úÖ ‡∏™‡∏Å‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            state['clean_text'] = data.get("clean_text")
            state['original_filename'] = os.path.basename(file_path)
        else:
            print(f"   -> ‚ùå API Error: {data.get('message')}")
            state['error_message'] = data.get('message')
    except requests.exceptions.RequestException as e:
        print(f"   -> ‚ùå Network Error: {e}")
        state['error_message'] = str(e)
    return state

# ==============================================================================
# ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà 2: Metadata Node (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
# ==============================================================================
def metadata_node(state: GraphState) -> GraphState:
    print("--- ‚öôÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ: Metadata Generation ---")
    if state.get("error_message"): return state
    try:
        response = requests.post(
            f"{API_BASE_URL}/tools/generate_metadata",
            json={"clean_text": state.get("clean_text"), "original_filename": state.get("original_filename")}
        )
        response.raise_for_status()
        data = response.json()
        print("   -> ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Metadata ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        state['metadata'] = data.get("metadata")
    except requests.exceptions.RequestException as e:
        print(f"   -> ‚ùå Network Error: {e}")
        state['error_message'] = str(e)
    return state

# ==============================================================================
# [V2] ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà 3: Layout Analysis (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà Strategize)
# ==============================================================================
def layout_analysis_node(state: GraphState) -> GraphState:
    print("--- ü§îüó∫Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ: Layout Analysis (V2 - ‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á) ---")
    if state.get("error_message"): return state

    llm = get_llm()
    metadata = state.get("metadata", {})
    clean_text = state.get("clean_text", "")

    # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÄ‡∏ä‡πà‡∏ô 20000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î Token ‡πÅ‡∏ï‡πà‡∏Å‡πá‡∏°‡∏≤‡∏Å‡∏û‡∏≠
    preview = clean_text[:20000]

    prompt = LAYOUT_ANALYSIS_PROMPT_V2.format(
        document_title=metadata.get("document_title", ""),
        summary=metadata.get("summary", ""),
        document_text=clean_text, # (‡∏™‡πà‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏´‡πâ LLM ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå)
        document_preview=preview  # (‡∏™‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ LLM ‡∏î‡∏π‡πÉ‡∏ô Prompt)
    )

    try:
        print("   -> üßê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ LLM ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...")
        response_text = llm.complete(prompt).text
        layout_data = _parse_json_from_llm(response_text)

        if layout_data and "layout_map" in layout_data:
            print(f"   -> ‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏û‡∏ö {len(layout_data['layout_map'].get('sections', []))} ‡∏™‡πà‡∏ß‡∏ô")
            state['layout_map'] = layout_data['layout_map']
        else:
            print("   -> ‚ö†Ô∏è ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß, ‡∏à‡∏∞‡πÉ‡∏ä‡πâ '‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß' (Recursive) ‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå")
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Layout Map ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (Fallback)
            fallback_map = {
                "sections": [{
                    "section_id": 1, "title": "Full Document",
                    "char_start": 0, "char_end": len(clean_text),
                    "recommended_strategy": "recursive"
                }]
            }
            state['layout_map'] = fallback_map

    except Exception as e:
        print(f"   -> ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: {e}")
        state['error_message'] = str(e)

    return state


# ==============================================================================
# [V2] ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà 4: Chunker (‡∏ó‡∏≥‡∏ï‡∏≤‡∏° "‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á" ‡πÅ‡∏•‡∏∞ "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏Å‡πâ")
# ==============================================================================
def chunker_node(state: GraphState) -> GraphState:
    print("--- ‚öôÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ: Chunking (V2 - ‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á) ---")
    if state.get("error_message"): return state

    layout_map = state.get("layout_map")
    
    # --- [V5] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏Å‡πâ" ‡∏à‡∏≤‡∏Å Validator ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ---
    retry_instructions = {}
    history_list = state.get("retry_history", [])
    if history_list:
        # ‡∏î‡∏∂‡∏á "‡∏¢‡∏≤" ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà "‡πÅ‡∏û‡∏ó‡∏¢‡πå" ‡∏™‡∏±‡πà‡∏á‡∏°‡∏≤
        last_prescription = history_list[-1].get("prescription_given", {})
        if last_prescription.get("action") == "RETRY_SECTION":
            retry_instructions = last_prescription
            print(f"   -> üí° ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏Å‡πâ (V5) ‡∏à‡∏≤‡∏Å Validator: {retry_instructions}")

    payload = {
        "clean_text": state.get("clean_text"),
        "metadata": state.get("metadata"),
        "original_filename": state.get("original_filename"),
        "layout_map": layout_map, # <-- [V2] ‡∏™‡πà‡∏á "‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á" ‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
        "retry_instructions": retry_instructions # <-- [V5] ‡∏™‡πà‡∏á "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏Å‡πâ" ‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
    }

    try:
        response = requests.post(f"{API_BASE_URL}/tools/create_chunks", json=payload)
        response.raise_for_status()
        data = response.json()
        print(f"   -> ‚úÖ ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏î‡πâ {len(data.get('chunks', []))} Chunks")
        state['chunks'] = data.get("chunks")
    
    except requests.exceptions.RequestException as e:
        print(f"   -> ‚ùå Network Error: {e}")
        state['error_message'] = str(e)

    return state

# ==============================================================================
# [V5] ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà 5: Validate Chunks (‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç V5)
# ==============================================================================
def validate_chunks_node(state: GraphState) -> GraphState:
    print("--- ü§îüßêüß† ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ: Validate Chunks (V5 - ‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç) ---")
    if state.get("error_message"): return state

    chunks = state.get("chunks", [])
    if not chunks:
        state['error_message'] = "Chunking process returned no chunks."
        return state

    llm = get_llm()
    previous_chunk_text = "‡πÑ‡∏°‡πà‡∏°‡∏µ"

    # [V5] ‡πÇ‡∏´‡∏•‡∏î "‡πÅ‡∏ü‡πâ‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"
    history_list = state.get("retry_history", [])
    retry_history_str = "‡πÑ‡∏°‡πà‡∏°‡∏µ"
    if history_list:
        retry_history_str = json.dumps(history_list, indent=2, ensure_ascii=False)

    # --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡∏•‡∏∞ Chunk ---
    for i, chunk in enumerate(chunks):
        current_chunk_text = chunk.get("content", "")
        if not current_chunk_text: continue

        # [V5] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Metadata ‡∏Ç‡∏≠‡∏á Chunk ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å "‡πÅ‡∏û‡∏ó‡∏¢‡πå" ‡∏ß‡πà‡∏≤ Chunk ‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏´‡∏ô
        chunk_metadata = chunk.get("metadata", {})
        section_id = chunk_metadata.get("section_id", "N/A")
        section_title = chunk_metadata.get("section_title", "N/A")
        strategy_used = chunk_metadata.get("strategy_used", "N/A")

        print(f"   -> üßê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Chunk #{i+1} (‡∏à‡∏≤‡∏Å Section: '{section_title}')...")

        # [V5] ‡πÉ‡∏ä‡πâ Prompt V5, ‡∏™‡πà‡∏á "‡πÅ‡∏ü‡πâ‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥" ‡πÅ‡∏•‡∏∞ "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Section"
        prompt = ULTIMATE_VALIDATION_PROMPT_V5.format(
            document_title=state.get("metadata", {}).get("document_title", "N/A"),
            previous_chunk_text=previous_chunk_text,
            current_chunk_text=current_chunk_text,
            section_id=section_id,
            section_title=section_title,
            strategy_used=strategy_used,
            retry_history_str=retry_history_str
        )
        
        response_text = llm.complete(prompt).text
        validation_result = _parse_json_from_llm(response_text)

        # [V5] ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à (‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô)
        if not validation_result or not validation_result.get("is_valid"):
            reason = validation_result.get("reason", "Unknown")
            diagnose = validation_result.get("diagnose", "No diagnosis")
            print(f"   -> ‚ùå Validation Failed: Chunk #{i+1} ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô.")
            print(f"      -> ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {reason}")
            print(f"      -> ‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢: {diagnose}")

            recommendation = validation_result.get("recommendation")
            
            # [V5] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å "‡πÅ‡∏ü‡πâ‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"
            if recommendation:
                 full_diagnosis_entry = {
                    "attempt": len(history_list) + 1,
                    "diagnosis": {"reason": reason, "diagnose": diagnose},
                    "prescription_given": recommendation 
                }
                 history_list.append(full_diagnosis_entry)
            else:
                recommendation = {"action": "GIVE_UP"}
                history_list.append({"attempt": len(history_list) + 1, "diagnosis": "Malformed LLM response", "prescription_given": recommendation})
            
            state['retry_history'] = history_list

            action = recommendation.get("action")
            
            if action == "GIVE_UP":
                print("   -> üí° ‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢ (LLM): ‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ (GIVE_UP).")
                state['error_message'] = f"Validation failed (LLM recommendation: GIVE_UP)"
                state['validation_passes'] = 0 
                return state

            elif action == "RETRY_SECTION":
                print(f"   -> üí° ‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢ (LLM): ‡∏™‡∏±‡πà‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà Section ID: {recommendation.get('target_section_id')}")
                # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° "‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£" (chunker_node) ‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô "‡∏¢‡∏≤" (RETRY_SECTION)
                # ‡∏à‡∏≤‡∏Å `retry_history` ‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                pass

            state['validation_passes'] = 0 
            return state # <-- ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Node ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà

        previous_chunk_text = current_chunk_text

    # --- [V5] ‡∏ñ‡πâ‡∏≤ 'for loop' ‡∏à‡∏ö (‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å Chunks) ---
    print("   -> ‚úÖ Validation Passed: ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û Chunks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°")
    state['validation_passes'] = 1
    state['retry_history'] = [] 
    return state

# ==============================================================================
# ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà 5: Indexer Node (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
# ==============================================================================
def index_node(state: GraphState) -> GraphState:
    print("--- ‚öôÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ: Indexing ---")
    if state.get("error_message"): return state
    try:
        response = requests.post(
            f"{API_BASE_URL}/tools/index_document",
            json={
                "clean_text": state.get("clean_text"),
                "metadata": state.get("metadata"),
                "chunks": state.get("chunks"),
                "original_filename": state.get("original_filename")
            }
        )
        response.raise_for_status()
        data = response.json()
        if data.get("success"):
            print("   -> ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        else:
            state['error_message'] = data.get("message")
            print(f"   -> ‚ùå Indexing Failed: {data.get('message')}")
    except requests.exceptions.RequestException as e:
        print(f"   -> ‚ùå Network Error: {e}")
        state['error_message'] = str(e)
    return state