# agentic_rag_pipeline/graph_agent/nodes.py (р╣Ар╕зр╕нр╕гр╣Мр╕Кр╕▒р╕Щ Intelligent Retry)

import os
import json
import requests
from langchain.prompts import PromptTemplate

# --- Import "р╕Цр╕▓р╕Ф" State р╣Бр╕ер╕░ LLM Provider р╕Вр╕нр╕Зр╣Ар╕гр╕▓ ---
from .state import GraphState
from agentic_rag_pipeline.core.llm_provider import get_llm

# --- API Server URL ---
API_BASE_URL = "http://localhost:8001"

# --- Prompt р╕кр╕│р╕лр╕гр╕▒р╕Ъ Validator LLM ---
ULTIMATE_VALIDATION_PROMPT = PromptTemplate.from_template(
    """р╕Др╕╕р╕Ур╕Др╕╖р╕н "р╕кр╕╕р╕Фр╕вр╕нр╕Фр╕Ър╕гр╕гр╕Ур╕▓р╕Шр╕┤р╕Бр╕▓р╕г AI" (Master Editor AI) р╕Вр╕нр╕Зр╕кр╕│р╕Щр╕▒р╕Бр╕Юр╕┤р╕бр╕Юр╣Мр╕Фр╕┤р╕Ир╕┤р╕Чр╕▒р╕е р╕ар╕▓р╕гр╕Бр╕┤р╕Ир╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕Др╕╖р╕нр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕╕р╕Ур╕ар╕▓р╕Юр╕Вр╕нр╕З "Chunk р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ" р╕нр╕вр╣Ир╕▓р╕Зр╣Ар╕Вр╣Йр╕бр╕Зр╕зр╕Фр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф р╣Вр╕Фр╕вр╕Юр╕┤р╕Ир╕▓р╕гр╕Ур╕▓р╕Ир╕▓р╕Б 3 р╕бр╕┤р╕Хр╕┤р╕лр╕ер╕▒р╕Б р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕Щр╣Ир╣Гр╕Ир╕зр╣Ир╕▓р╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Ир╕░р╕Цр╕╣р╕Бр╣Ар╕гр╕╡р╕вр╕Ър╣Ар╕гр╕╡р╕вр╕Зр╕нр╕нр╕Бр╕бр╕▓р╕нр╕вр╣Ир╕▓р╕Зр╕кр╕бр╕Ър╕╣р╕гр╕Ур╣Мр╣Бр╕Ър╕Ър╕Чр╕╡р╣Ир╕кр╕╕р╕Ф

---
### **р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ыр╕гр╕░р╕Бр╕нр╕Ър╕Бр╕▓р╕гр╕Юр╕┤р╕Ир╕▓р╕гр╕Ур╕▓:**

1.  **р╕лр╕▒р╕зр╕Вр╣Йр╕нр╕лр╕ер╕▒р╕Бр╕Вр╕нр╕Зр╣Ар╕нр╕Бр╕кр╕▓р╕г (Main Topic):** "{document_title}"

2.  **Chunk р╕Бр╣Ир╕нр╕Щр╕лр╕Щр╣Йр╕▓ (Previous Chunk):**
   (р╕лр╕▓р╕Бр╣Ар╕Ыр╣Зр╕Щ Chunk р╣Бр╕гр╕Бр╕кр╕╕р╕Ф р╕кр╣Ир╕зр╕Щр╕Щр╕╡р╣Йр╕Ир╕░р╕гр╕░р╕Ър╕╕р╕зр╣Ир╕▓ "р╣Др╕бр╣Ир╕бр╕╡")
   ---
   {previous_chunk_text}
   ---

3.  **Chunk р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ (Current Chunk):**
   ---
   {current_chunk_text}
   ---

---
### **р╕ар╕▓р╕гр╕Бр╕┤р╕Ир╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ (Your Mission):**

р╕Ир╕Зр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Вр╣Йр╕▓р╕Зр╕Хр╣Йр╕Щр╕нр╕вр╣Ир╕▓р╕Зр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф р╣Бр╕ер╕░р╕Ыр╕гр╕░р╣Ар╕бр╕┤р╕Щр╕Др╕╕р╕Ур╕ар╕▓р╕Юр╕Вр╕нр╕З **"Chunk р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ"** р╕Хр╕▓р╕бр╣Ар╕Бр╕Ур╕Ср╣Мр╕Хр╣Ир╕нр╣Др╕Ыр╕Щр╕╡р╣Й р╣Бр╕ер╣Йр╕зр╕Хр╕нр╕Ър╕Бр╕ер╕▒р╕Ър╣Ар╕Ыр╣Зр╕Щ JSON object р╕Чр╕╡р╣Ир╕кр╕бр╕Ър╕╣р╕гр╕Ур╣Мр╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ:

1.  **Integrity (р╕Др╕зр╕▓р╕бр╕кр╕бр╕Ър╕╣р╕гр╕Ур╣Мр╣Гр╕Щр╕Хр╕▒р╕зр╣Ар╕нр╕З):**
    - "Chunk р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ" р╣Ар╕Ыр╣Зр╕Щр╕Ыр╕гр╕░р╣Вр╕вр╕Др╕Чр╕╡р╣Ир╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М, р╕нр╣Ир╕▓р╕Щр╕гр╕╣р╣Йр╣Ар╕гр╕╖р╣Ир╕нр╕З, р╣Бр╕ер╕░р╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╕▒р╕Фр╕Ир╕Ър╕Бр╕ер╕▓р╕Зр╕Др╕▒р╕Щр╣Гр╕Кр╣Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣И?

2.  **Cohesion (р╕Др╕зр╕▓р╕бр╕Хр╣Ир╕нр╣Ар╕Щр╕╖р╣Ир╕нр╕Зр╕Чр╕▓р╕Зр╕Ър╕гр╕┤р╕Ър╕Ч):**
    - "Chunk р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ" р╕бр╕╡р╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓р╕Чр╕╡р╣Ир╕Хр╣Ир╕нр╣Ар╕Щр╕╖р╣Ир╕нр╕Зр╣Бр╕ер╕░р╕кр╕бр╣Ар╕лр╕Хр╕╕р╕кр╕бр╕Ьр╕ер╕Бр╕▒р╕Ъ "Chunk р╕Бр╣Ир╕нр╕Щр╕лр╕Щр╣Йр╕▓" р╕лр╕гр╕╖р╕нр╣Др╕бр╣И? р╕бр╕▒р╕Щр╣Ар╕Ыр╣Зр╕Щр╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕гр╕▓р╕зр╕Чр╕╡р╣Ир╕Хр╕▓р╕бр╕Бр╕▒р╕Щр╕бр╕▓ р╕лр╕гр╕╖р╕нр╣Ар╕Ыр╣Зр╕Щр╕Бр╕▓р╕гр╕Вр╕╢р╣Йр╕Щр╕лр╕▒р╕зр╕Вр╣Йр╕нр╣Гр╕лр╕бр╣Ир╕Чр╕╡р╣Ир╕кр╕бр╣Ар╕лр╕Хр╕╕р╕кр╕бр╕Ьр╕е?

3.  **Relevance (р╕Др╕зр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕Зр╕Бр╕▒р╕Ър╕лр╕▒р╕зр╕Вр╣Йр╕нр╕лр╕ер╕▒р╕Б):**
    - р╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓р╣Гр╕Щ "Chunk р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ" р╕вр╕▒р╕Зр╕Др╕Зр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕Зр╕Бр╕▒р╕Ъ "р╕лр╕▒р╕зр╕Вр╣Йр╕нр╕лр╕ер╕▒р╕Бр╕Вр╕нр╕Зр╣Ар╕нр╕Бр╕кр╕▓р╕г" р╕лр╕гр╕╖р╕нр╣Др╕бр╣И р╕лр╕гр╕╖р╕нр╣Ар╕Ыр╣Зр╕Щр╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓р╕Чр╕╡р╣Ир╕Фр╕╣р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Ир╕░р╕лр╕ер╕╕р╕Фр╕Ыр╕гр╕░р╣Ар╕Фр╣Зр╕Щр╣Др╕Ыр╕нр╕вр╣Ир╕▓р╕Зр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щ?

**р╕Ир╕Зр╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕Бр╕▓р╕гр╕Ыр╕гр╕░р╣Ар╕бр╕┤р╕Щр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕ер╕Зр╣Гр╕Щ JSON object р╕Чр╕╡р╣Ир╕бр╕╡р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Фр╕▒р╕Зр╕Щр╕╡р╣Йр╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ:**

{{
  "is_valid": boolean,
  "reason": "р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╣Ар╕лр╕Хр╕╕р╕Ьр╕ер╕Вр╕нр╕Зр╕Бр╕▓р╕гр╕Хр╕▒р╕Фр╕кр╕┤р╕Щр╣Гр╕Ир╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕нр╕вр╣Ир╕▓р╕Зр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щр╣Бр╕ер╕░р╕Бр╕гр╕░р╕Кр╕▒р╕Ъ р╕лр╕▓р╕Бр╣Др╕бр╣Ир╕Ьр╣Ир╕▓р╕Щ р╣Гр╕лр╣Йр╕гр╕░р╕Ър╕╕р╕зр╣Ир╕▓р╣Др╕бр╣Ир╕Ьр╣Ир╕▓р╕Щр╣Ар╕Юр╕гр╕▓р╕░р╣Ар╕Бр╕Ур╕Ср╣Мр╕Вр╣Йр╕нр╣Др╕лр╕Щ (Integrity, Cohesion, or Relevance) р╣Бр╕ер╕░р╣Ар╕Юр╕гр╕▓р╕░р╕нр╕░р╣Др╕г (р╣Ар╕Кр╣Ир╕Щ 'incomplete sentence', 'context shift', 'irrelevant topic')"
}}
"""
)

STRATEGY_PROMPT = PromptTemplate.from_template(
    """р╕Др╕╕р╕Ур╕Др╕╖р╕н "р╕Щр╕▒р╕Бр╕зр╕▓р╕Зр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣Мр╕Бр╕▓р╕гр╣Бр╕Ър╣Ир╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е" (Chunking Strategist)
    р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕Др╕╖р╕нр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕гр╕╕р╕Ыр╕Вр╕нр╕Зр╣Ар╕нр╕Бр╕кр╕▓р╕г р╣Бр╕ер╣Йр╕зр╣Ар╕ер╕╖р╕нр╕Бр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣Мр╕Бр╕▓р╕гр╣Бр╕Ър╣Ир╕З (Chunking Strategy) р╕Чр╕╡р╣И "р╣Ар╕лр╕бр╕▓р╕░р╕кр╕бр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф" р╣Ар╕Юр╕╡р╕вр╕З 1 р╕нр╕вр╣Ир╕▓р╕Зр╕Ир╕▓р╕Бр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Хр╣Ир╕нр╣Др╕Ыр╕Щр╕╡р╣Й:

    [р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣М]
    1. "structural": р╣Ар╕лр╕бр╕▓р╕░р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕нр╕Бр╕кр╕▓р╕гр╕Чр╕╡р╣Ир╕бр╕╡р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щр╣Бр╕ер╕░р╕Др╕▓р╕Фр╣Ар╕Фр╕▓р╣Др╕Фр╣Й р╣Ар╕Кр╣Ир╕Щ р╕Бр╕Ор╕лр╕бр╕▓р╕в (р╕бр╕▓р╕Хр╕гр╕▓), р╕гр╕░р╣Ар╕Ър╕╡р╕вр╕Ъ (р╕Вр╣Йр╕н), р╕лр╕гр╕╖р╕нр╕Ър╕Чр╕кр╕Щр╕Чр╕Щр╕▓ (р╕Др╕│р╕Цр╕▓р╕б-р╕Др╕│р╕Хр╕нр╕Ъ)
    2. "semantic": р╣Ар╕лр╕бр╕▓р╕░р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕нр╕Бр╕кр╕▓р╕гр╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╕Др╕зр╕▓р╕бр╣Ар╕гр╕╡р╕вр╕З, р╕Ър╕Чр╕Др╕зр╕▓р╕б, р╕лр╕гр╕╖р╕нр╕Др╕╣р╣Ир╕бр╕╖р╕н р╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓ "р╕Бр╕ер╕╕р╣Ир╕бр╕Бр╣Йр╕нр╕Щр╕Вр╕нр╕Зр╕Др╕зр╕▓р╕бр╕лр╕бр╕▓р╕в" р╣Бр╕ер╕░р╕Хр╕▒р╕Фр╣Бр╕Ър╣Ир╕Зр╣Ар╕бр╕╖р╣Ир╕нр╕бр╕╡р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕нр╕вр╣Ир╕▓р╕Зр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щ
    3. "recursive": р╣Ар╕Ыр╣Зр╕Щр╕зр╕┤р╕Шр╕╡р╕бр╕▓р╕Хр╕гр╕Рр╕▓р╕Щр╕Чр╕╡р╣Ир╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕вр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф р╣Ар╕лр╕бр╕▓р╕░р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕нр╕Бр╕кр╕▓р╕гр╕Чр╕▒р╣Ир╕зр╣Др╕Ыр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕бр╕╡р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щ р╕лр╕гр╕╖р╕нр╣Ар╕бр╕╖р╣Ир╕нр╕Др╕╕р╕Ур╣Др╕бр╣Ир╣Бр╕Щр╣Ир╣Гр╕И

    [р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕гр╕╕р╕Ыр╕Вр╕нр╕Зр╣Ар╕нр╕Бр╕кр╕▓р╕г]
    - р╕лр╕▒р╕зр╕Вр╣Йр╕н: "{document_title}"
    - р╕кр╕гр╕╕р╕Ыр╕вр╣Ир╕н: "{summary}"
    - р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓: "{content_preview}"

    р╕Ир╕Зр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕гр╕╕р╕Ы р╣Бр╕ер╣Йр╕зр╕Хр╕нр╕Ър╕Бр╕ер╕▒р╕Ър╕Фр╣Йр╕зр╕в "р╕Кр╕╖р╣Ир╕нр╕Вр╕нр╕Зр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣Мр╕Чр╕╡р╣Ир╕Фр╕╡р╕Чр╕╡р╣Ир╕кр╕╕р╕Ф" р╣Ар╕Юр╕╡р╕вр╕Зр╕Др╕│р╣Ар╕Фр╕╡р╕вр╕зр╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ (р╣Ар╕Кр╣Ир╕Щ "structural", "semantic", "recursive")
    """
)

def _parse_json_from_llm(text: str) -> dict | None:
    """Helper function to safely parse JSON from LLM response."""
    try:
        match = text[text.find('{'):text.rfind('}')+1]
        return json.loads(match)
    except Exception:
        return None

# ==============================================================================
# р╕кр╕Цр╕▓р╕Щр╕╡р╕Чр╕╡р╣И 1: Preprocess Node (р╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В)
# ==============================================================================
def preprocess_node(state: GraphState) -> GraphState:
    print("--- тЪЩя╕П р╕кр╕Цр╕▓р╕Щр╕╡: Preprocessing ---")
    file_path = state.get("file_path")
    try:
        response = requests.post(f"{API_BASE_URL}/tools/preprocess_document", json={"file_path": file_path})
        response.raise_for_status()
        data = response.json()
        if data.get("status") == "success":
            print("   -> тЬЕ р╕кр╕Бр╕▒р╕Фр╣Бр╕ер╕░р╕Юр╕┤р╕кр╕╣р╕Ир╕Щр╣Мр╕нр╕▒р╕Бр╕йр╕гр╕кр╕│р╣Ар╕гр╣Зр╕И")
            state['clean_text'] = data.get("clean_text")
            state['original_filename'] = os.path.basename(file_path)
        else:
            print(f"   -> тЭМ API Error: {data.get('message')}")
            state['error_message'] = data.get('message')
    except requests.exceptions.RequestException as e:
        print(f"   -> тЭМ Network Error: {e}")
        state['error_message'] = str(e)
    return state

# ==============================================================================
# р╕кр╕Цр╕▓р╕Щр╕╡р╕Чр╕╡р╣И 2: Metadata Node (р╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В)
# ==============================================================================
def metadata_node(state: GraphState) -> GraphState:
    print("--- тЪЩя╕П р╕кр╕Цр╕▓р╕Щр╕╡: Metadata Generation ---")
    if state.get("error_message"): return state
    try:
        response = requests.post(
            f"{API_BASE_URL}/tools/generate_metadata",
            json={"clean_text": state.get("clean_text"), "original_filename": state.get("original_filename")}
        )
        response.raise_for_status()
        data = response.json()
        print("   -> тЬЕ р╕кр╕гр╣Йр╕▓р╕З Metadata р╕кр╕│р╣Ар╕гр╣Зр╕И")
        state['metadata'] = data.get("metadata")
    except requests.exceptions.RequestException as e:
        print(f"   -> тЭМ Network Error: {e}")
        state['error_message'] = str(e)
    return state

# ==============================================================================
# [р╣Гр╕лр╕бр╣И!] р╕кр╕Цр╕▓р╕Щр╕╡р╕Чр╕╡р╣И 3: Strategize Chunking Node (р╕Щр╕▒р╕Бр╕зр╕▓р╕Зр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣М)
# ==============================================================================
def strategize_chunking_node(state: GraphState) -> GraphState:
    """
    Node р╕Щр╕╡р╣Йр╕Др╕╖р╕н "р╕Щр╕▒р╕Бр╕зр╕▓р╕Зр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣М" р╕Чр╕╡р╣Ир╣Гр╕Кр╣Й LLM р╕Хр╕▒р╕Фр╕кр╕┤р╕Щр╣Гр╕Ир╣Ар╕ер╕╖р╕нр╕Б Chunking Strategy
    """
    print("--- ЁЯдФтЩЯя╕П р╕кр╕Цр╕▓р╕Щр╕╡: Strategist (р╕зр╕▓р╕Зр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣Мр╕Бр╕▓р╕гр╣Бр╕Ър╣Ир╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е) ---")
    if state.get("error_message"): return state

    llm = get_llm()
    metadata = state.get("metadata", {})
    clean_text = state.get("clean_text", "")

    prompt = STRATEGY_PROMPT.format(
        document_title=metadata.get("document_title", ""),
        summary=metadata.get("summary", ""),
        content_preview=clean_text[:500] # р╣Гр╕Кр╣Й 500 р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕гр╣Бр╕гр╕Бр╣Ар╕Ыр╣Зр╕Щр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З
    )

    try:
        print("   -> ЁЯзР р╕Бр╕│р╕ер╕▒р╕Зр╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╣Й LLM р╕Кр╣Ир╕зр╕вр╣Ар╕ер╕╖р╕нр╕Бр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣М...")
        response = llm.complete(prompt).text
        # р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Др╕│р╕Хр╕нр╕Ър╕Вр╕нр╕З LLM р╣Гр╕лр╣Йр╣Ар╕лр╕ер╕╖р╕нр╣Бр╕Др╣Ир╕Кр╕╖р╣Ир╕нр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣М
        strategy = response.strip().lower().replace('"', '').replace("'", "")

        if strategy not in ["structural", "semantic", "recursive"]:
            print(f"   -> тЪая╕П LLM р╕Хр╕нр╕Ър╕Бр╕ер╕▒р╕Ър╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З ('{strategy}'), р╣Гр╕Кр╣Й 'recursive' р╣Ар╕Ыр╣Зр╕Щр╕Др╣Ир╕▓р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ")
            strategy = "recursive"

        print(f"   -> тЬЕ LLM р╕Хр╕▒р╕Фр╕кр╕┤р╕Щр╣Гр╕Ир╣Ар╕ер╕╖р╕нр╕Бр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣М: '{strategy}'")
        state['chunking_strategy'] = strategy

    except Exception as e:
        print(f"   -> тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╣Ар╕ер╕╖р╕нр╕Бр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣М, р╣Гр╕Кр╣Й 'recursive' р╣Ар╕Ыр╣Зр╕Щр╕Др╣Ир╕▓р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ. Error: {e}")
        state['chunking_strategy'] = "recursive"

    return state


# ==============================================================================
# р╕кр╕Цр╕▓р╕Щр╕╡р╕Чр╕╡р╣И 4: Chunker Node (р╣Ар╕зр╕нр╕гр╣Мр╕Кр╕▒р╕Щр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З: р╕Чр╕│р╕Хр╕▓р╕бр╕Др╕│р╕кр╕▒р╣Ир╕З)
# ==============================================================================
def chunker_node(state: GraphState) -> GraphState:
    print("--- тЪЩя╕П р╕кр╕Цр╕▓р╕Щр╕╡: Chunking (р╕Чр╕│р╕Хр╕▓р╕бр╕Др╕│р╕кр╕▒р╣Ир╕З) ---")
    if state.get("error_message"): return state

    params = state.get("chunking_params", {})
    # [р╣Гр╕лр╕бр╣И!] р╕Фр╕╢р╕Зр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣Мр╕Чр╕╡р╣И "р╕Щр╕▒р╕Бр╕зр╕▓р╕Зр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣М" р╣Ар╕ер╕╖р╕нр╕Бр╣Др╕зр╣Йр╕Ир╕▓р╕Б State
    strategy = state.get("chunking_strategy", "recursive")

    print(f"   -> р╕Чр╕│р╕Зр╕▓р╕Щр╕Хр╕▓р╕бр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣М: '{strategy}' р╕Юр╕гр╣Йр╕нр╕бр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│: {params}")

    payload = {
        "clean_text": state.get("clean_text"),
        "metadata": state.get("metadata"),
        "original_filename": state.get("original_filename"),
        "strategy": strategy, # <-- р╕кр╣Ир╕Зр╕Бр╕ер╕вр╕╕р╕Чр╕Шр╣Мр╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╣Ар╕ер╕╖р╕нр╕Б
        **params
    }

    try:
        response = requests.post(f"{API_BASE_URL}/tools/create_chunks", json=payload)
        response.raise_for_status()
        data = response.json()
        print(f"   -> тЬЕ р╣Бр╕Ър╣Ир╕Зр╣Ар╕нр╕Бр╕кр╕▓р╕гр╕кр╕│р╣Ар╕гр╣Зр╕И р╣Др╕Фр╣Й {len(data.get('chunks', []))} Chunks")
        state['chunks'] = data.get("chunks")
        state['chunking_params'] = {}
    except requests.exceptions.RequestException as e:
        print(f"   -> тЭМ Network Error: {e}")
        state['error_message'] = str(e)

    return state

# ==============================================================================
# р╕кр╕Цр╕▓р╕Щр╕╡р╕Чр╕╡р╣И 4: Validate Chunks Node (р╣Ар╕зр╕нр╕гр╣Мр╕Кр╕▒р╕Щ "р╕кр╕╕р╕Фр╕вр╕нр╕Фр╕Ър╕гр╕гр╕Ур╕▓р╕Шр╕┤р╕Бр╕▓р╕г")
# ==============================================================================
def validate_chunks_node(state: GraphState) -> GraphState:
    print("--- ЁЯдФЁЯзРЁЯза р╕кр╕Цр╕▓р╕Щр╕╡: Validate Chunks (р╣Гр╕Кр╣Йр╕кр╕бр╕нр╕З р╕кр╕╕р╕Фр╕вр╕нр╕Фр╕Ър╕гр╕гр╕Ур╕▓р╕Шр╕┤р╕Бр╕▓р╕г) ---")
    if state.get("error_message"): return state

    chunks = state.get("chunks", [])
    metadata = state.get("metadata", {})
    document_title = metadata.get("document_title", "р╣Др╕бр╣Ир╕гр╕░р╕Ър╕╕")

    if not chunks:
        state['error_message'] = "Chunking process returned no chunks."
        return state

    llm = get_llm()
    previous_chunk_text = "р╣Др╕бр╣Ир╕бр╕╡"

    for i, chunk in enumerate(chunks):
        current_chunk_text = chunk.get("content", "")
        if not current_chunk_text: continue

        print(f"   -> ЁЯзР р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕╕р╕Ур╕ар╕▓р╕Ю Chunk #{i+1} (р╣Ар╕Чр╕╡р╕вр╕Ър╕Бр╕▒р╕Ъ Chunk р╕Бр╣Ир╕нр╕Щр╕лр╕Щр╣Йр╕▓)...")

        prompt = ULTIMATE_VALIDATION_PROMPT.format(
            document_title=document_title,
            previous_chunk_text=previous_chunk_text[:1000], # р╣Гр╕Кр╣Йр╣Бр╕Др╣Ир╕Ър╕▓р╕Зр╕кр╣Ир╕зр╕Щр╣Ар╕Юр╕╖р╣Ир╕нр╕Ыр╕гр╕░р╕лр╕вр╕▒р╕Ф Token
            current_chunk_text=current_chunk_text[:1000]
        )
        response_text = llm.complete(prompt).text
        validation_result = _parse_json_from_llm(response_text)

        if not validation_result or not validation_result.get("is_valid"):
            reason = validation_result.get("reason", "Unknown") if validation_result else "Malformed LLM response"
            print(f"   -> тЭМ Validation Failed: Chunk #{i+1} р╕Др╕╕р╕Ур╕ар╕▓р╕Юр╣Др╕бр╣Ир╕Ьр╣Ир╕▓р╕Щ. р╣Ар╕лр╕Хр╕╕р╕Ьр╕е: {reason}")

            # --- р╕кр╣Ир╕зр╕Щр╕Бр╕▓р╕гр╕зр╕┤р╕Щр╕┤р╕Ир╕Йр╕▒р╕вр╣Бр╕ер╕░р╕кр╕▒р╣Ир╕Зр╕вр╕▓ (р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Чр╕│р╣Гр╕лр╣Йр╕Лр╕▒р╕Ър╕Лр╣Йр╕нр╕Щр╕Вр╕╢р╣Йр╕Щр╣Др╕Фр╣Йр╕нр╕╡р╕Бр╣Гр╕Щр╕нр╕Щр╕▓р╕Др╕Х) ---
            new_params = {}
            if "cohesion" in reason.lower() or "context" in reason.lower():
                print("   -> ЁЯТб р╕зр╕┤р╕Щр╕┤р╕Ир╕Йр╕▒р╕в: р╕Ър╕гр╕┤р╕Ър╕Чр╕нр╕▓р╕Ир╕Вр╕▓р╕Фр╕лр╕▓р╕в р╕ер╕нр╕Зр╣Ар╕Юр╕┤р╣Ир╕б Overlap")
                new_params["chunk_overlap"] = 250 # р╕ер╕нр╕Зр╣Ар╕Юр╕┤р╣Ир╕б Overlap
            else:
                print("   -> ЁЯТб р╕зр╕┤р╕Щр╕┤р╕Ир╕Йр╕▒р╕в: р╕Ыр╕▒р╕Нр╕лр╕▓р╕нр╕▓р╕Ир╕нр╕вр╕╣р╣Ир╕Чр╕╡р╣Ир╕Вр╕Щр╕▓р╕Ф р╕ер╕нр╕Зр╕ер╕Фр╕Вр╕Щр╕▓р╕Ф Chunk")
                new_params["chunk_size"] = 700

            state['chunking_params'] = new_params
            state['chunking_retries'] = state.get('chunking_retries', 0) + 1
            state['validation_passes'] = 0
            return state

        # р╕нр╕▒р╕Ыр╣Ар╕Фр╕Х previous_chunk_text р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕зр╕Щр╕ер╕╣р╕Ыр╕Др╕гр╕▒р╣Йр╕Зр╕Цр╕▒р╕Фр╣Др╕Ы
        previous_chunk_text = current_chunk_text

    print("   -> тЬЕ Validation Passed: р╕Др╕╕р╕Ур╕ар╕▓р╕Ю Chunks р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕нр╕вр╕╣р╣Ир╣Гр╕Щр╣Ар╕Бр╕Ур╕Ср╣Мр╕Фр╕╡р╣Ар╕вр╕╡р╣Ир╕вр╕б")
    state['validation_passes'] = 1
    return state

# ==============================================================================
# р╕кр╕Цр╕▓р╕Щр╕╡р╕Чр╕╡р╣И 5: Indexer Node (р╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В)
# ==============================================================================
def index_node(state: GraphState) -> GraphState:
    print("--- тЪЩя╕П р╕кр╕Цр╕▓р╕Щр╕╡: Indexing ---")
    if state.get("error_message"): return state
    try:
        response = requests.post(
            f"{API_BASE_URL}/tools/index_document",
            json={
                "clean_text": state.get("clean_text"),
                "metadata": state.get("metadata"),
                "chunks": state.get("chunks"),
                "original_filename": state.get("original_filename")
            }
        )
        response.raise_for_status()
        data = response.json()
        if data.get("success"):
            print("   -> тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕Зр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╣Ар╕гр╣Зр╕И!")
        else:
            state['error_message'] = data.get("message")
            print(f"   -> тЭМ Indexing Failed: {data.get('message')}")
    except requests.exceptions.RequestException as e:
        print(f"   -> тЭМ Network Error: {e}")
        state['error_message'] = str(e)
    return state