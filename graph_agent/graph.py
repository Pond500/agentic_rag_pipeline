# agentic_rag_pipeline/graph_agent/graph.py (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô V5 + V2)

from langgraph.graph import StateGraph, END
from typing import Literal

# --- Import "‡∏ñ‡∏≤‡∏î" ‡πÅ‡∏•‡∏∞ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ ---
from .state import GraphState
from .nodes import (
    preprocess_node,
    metadata_node,
    chunker_node,
    layout_analysis_node,  # <-- [V2] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å strategize_chunking_node
    validate_chunks_node,  # (‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Validator V5)
    index_node
)

# ==============================================================================
# 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏ó‡∏≤‡∏á‡πÅ‡∏¢‡∏Å" (Conditional Edge) (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô V5 - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
# ==============================================================================
def should_continue(state: GraphState) -> Literal["continue", "retry_chunking", "end"]:
    """
    ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ "‡∏™‡∏°‡∏≠‡∏á" ‡∏Ç‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÅ‡∏¢‡∏Å (V5) ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô‡∏ï‡πà‡∏≠
    ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ Validate Chunks ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
    """
    print("--- üö¶ ‡∏ó‡∏≤‡∏á‡πÅ‡∏¢‡∏Å (V5): Deciding next step ---")

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏Å‡∏¥‡∏î Error ‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á ‡∏´‡∏£‡∏∑‡∏≠ Validator ‡∏™‡∏±‡πà‡∏á "GIVE_UP" (V5)
    if state.get("error_message"):
        print(f"   -> üõë Decision: ‡∏û‡∏ö Error ('{state.get('error_message')}'), ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        return "end"

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ú‡πà‡∏≤‡∏ô -> ‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡∏¢‡∏±‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    if state.get("validation_passes", 0) > 0:
        print("   -> ‚úÖ Decision: ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ú‡πà‡∏≤‡∏ô, ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ Index")
        return "continue"

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏•‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ
    retry_count = len(state.get("retry_history", []))
    
    # --- [‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï!] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ---
    if retry_count < 5: 
        print(f"   -> üîÑ Decision: ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô, ‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏≥ Chunker ‡πÉ‡∏´‡∏°‡πà (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {retry_count + 1} / 5)")
        return "retry_chunking"

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 4: ‡∏•‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡∏Ñ‡∏£‡∏ö 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô -> ‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    else:
        print(f"   -> üõë Decision: ‡∏•‡∏≠‡∏á‡∏ó‡∏≥ Chunker ‡∏ã‡πâ‡∏≥‡∏Ñ‡∏£‡∏ö 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß, ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        state['error_message'] = f"Chunking validation failed after {retry_count} retries."
        return "end"

# ==============================================================================
# 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô" (The Graph Definition) (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô V2)
# ==============================================================================
def create_graph():
    workflow = StateGraph(GraphState)

    # --- ‡πÄ‡∏û‡∏¥‡πà‡∏° "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" (V2) ---
    workflow.add_node("preprocess", preprocess_node)
    workflow.add_node("generate_metadata", metadata_node)
    workflow.add_node("layout_analysis", layout_analysis_node) # <--- [V2] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    workflow.add_node("chunker", chunker_node)
    workflow.add_node("validate_chunks", validate_chunks_node)
    workflow.add_node("index", index_node)

    workflow.set_entry_point("preprocess")

    # --- [V2] ‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà ---
    workflow.add_edge("preprocess", "generate_metadata")
    workflow.add_edge("generate_metadata", "layout_analysis") # <-- [V2] ‡∏à‡∏≤‡∏Å metadata ‡πÑ‡∏õ‡∏´‡∏≤ layout_analysis
    workflow.add_edge("layout_analysis", "chunker")       # <-- [V2] ‡∏à‡∏≤‡∏Å layout_analysis ‡πÑ‡∏õ‡∏´‡∏≤ chunker
    workflow.add_edge("chunker", "validate_chunks")

    # --- ‡∏ó‡∏≤‡∏á‡πÅ‡∏¢‡∏Å (V5) ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ---
    workflow.add_conditional_edges(
        "validate_chunks",
        should_continue,
        {
            "continue": "index",
            "retry_chunking": "chunker", # ‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà chunker (V2) ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô "‡∏¢‡∏≤" (V5) ‡∏à‡∏≤‡∏Å state
            "end": END
        }
    )

    workflow.add_edge("index", END)

    app = workflow.compile()
    return app

graph_app = create_graph()