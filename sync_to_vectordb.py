# agentic_rag_pipeline/sync_to_vectordb.py

import psycopg2
import json
from qdrant_client import models, QdrantClient

# --- Import ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ ---
from agentic_rag_pipeline import config
from agentic_rag_pipeline.core.llm_provider import get_embed_model

def get_source_db_connection():
    """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á (PostgreSQL ‡∏Ç‡∏≠‡∏á Agent)"""
    try:
        conn = psycopg2.connect(
            dbname=config.DB_NAME,
            user=config.DB_USER,
            password=config.DB_PASS,
            host=config.DB_HOST,
            port=config.DB_PORT
        )
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PostgreSQL (‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return conn
    except psycopg2.OperationalError as e:
        print(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return None

def get_destination_qdrant_client():
    """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Vector DB ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á (Qdrant ‡∏Ç‡∏≠‡∏á Agent Pipeline)"""
    try:
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Config ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Agent Qdrant
        client = QdrantClient(host=config.AGENT_QDRANT_HOST, port=config.AGENT_QDRANT_PORT)
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Qdrant (Agent Pipeline) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return client
    except Exception as e:
        print(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Qdrant ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return None

def main():
    print("\n--- üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å PostgreSQL ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Qdrant (Agent's DB) ---")

    conn = get_source_db_connection()
    qdrant_client = get_destination_qdrant_client()
    embed_model = get_embed_model() # ‡πÇ‡∏´‡∏•‡∏î Embedding model ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Vector

    if not conn or not qdrant_client or not embed_model:
        print("!!! ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß !!!")
        return

    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Config ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Agent Qdrant
    collection_name = config.AGENT_QDRANT_COLLECTION_NAME
    # ‡∏î‡∏∂‡∏á‡∏Ç‡∏ô‡∏≤‡∏î vector ‡∏à‡∏≤‡∏Å model ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô pipeline
    vector_size = embed_model.get_sentence_embedding_dimension()

    # --- 1. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Chunks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å PostgreSQL ---
    points_to_upsert = []
    try:
        with conn.cursor() as cur:
            print(f"\n1. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Chunks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å PostgreSQL (DB: {config.DB_NAME})...")
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Query ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ id, chunk_text, embedding, ‡πÅ‡∏•‡∏∞ metadata ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            cur.execute("SELECT id, chunk_text, embedding, metadata FROM knowledge_chunks")
            
            for row in cur.fetchall():
                chunk_id, chunk_text, embedding_str, metadata = row
                
                if not embedding_str or not metadata:
                    print(f"  > ‡∏Ç‡πâ‡∏≤‡∏° Chunk ID: {chunk_id} ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
                    continue
                
                # Payload ‡πÉ‡∏ô Qdrant ‡∏à‡∏∞‡πÉ‡∏ä‡πâ metadata ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å Librarian Agent
                # ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° 'text' ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ Keyword Search ‡πÑ‡∏î‡πâ
                payload = metadata.copy()
                payload['text'] = chunk_text

                points_to_upsert.append(
                    models.PointStruct(
                        id=chunk_id,
                        vector=json.loads(embedding_str), # ‡πÅ‡∏õ‡∏•‡∏á JSON string ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô list
                        payload=payload
                    )
                )
        print(f"   -> ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(points_to_upsert)} Chunks")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å PostgreSQL: {e}")
        return
    finally:
        if conn:
            conn.close()

    if not points_to_upsert:
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á Qdrant.")
        return

    # --- 2. ‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Collection ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Qdrant ‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà ---
    try:
        print(f"\n2. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Collection ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Qdrant: '{collection_name}'...")
        qdrant_client.recreate_collection(
            collection_name=collection_name,
            vectors_config=models.VectorParams(size=vector_size, distance=models.Distance.COSINE),
        )
        print("   -> ‡∏™‡∏£‡πâ‡∏≤‡∏á Collection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Collection ‡πÉ‡∏ô Qdrant ‡πÑ‡∏î‡πâ: {e}")
        return

    # --- 3. Upsert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ Qdrant ---
    print(f"\n3. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ {len(points_to_upsert)} points ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Qdrant...")
    qdrant_client.upsert(
        collection_name=collection_name,
        points=points_to_upsert,
        wait=True,
    )
    
    print("\n--- üéâ Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Qdrant ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ---")
    
    # --- 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ---
    collection_info = qdrant_client.get_collection(collection_name=collection_name)
    print("\n--- üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô Qdrant ---")
    print(f"   ‡∏ä‡∏∑‡πà‡∏≠ Collection: {collection_name}")
    print(f"   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Points ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {collection_info.points_count}")

if __name__ == "__main__":
    main()